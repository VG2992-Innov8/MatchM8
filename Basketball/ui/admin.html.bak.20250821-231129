<!doctype html>
<html lang="en">
<head>
  <link rel="icon" href="/favicon.ico">
  <meta charset="utf-8" />
  <title>Admin — MatchM8</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="stylesheet" href="/styles.css">

  <!-- Scoped sizing just for this page -->
  <style>
    /* Add Fixtures table sizing */
    #addFixturesTbl { table-layout: fixed; width: 100%; }
    #addFixturesTbl th:nth-child(1) { width: 56px; }               /* # */
    #addFixturesTbl th:nth-child(2),
    #addFixturesTbl th:nth-child(3) { width: 34%; }                /* Home/Away */
    #addFixturesTbl th:nth-child(4),
    #addFixturesTbl th:nth-child(5) { width: 13%; }                /* Date/Time */
    #addFixturesTbl td input.input {
      width: 100%; min-width: 0; font-size: 18px; padding: 12px 14px; box-sizing: border-box;
    }
    /* Slightly roomier inputs on this page */
    .input { font-size: 16px; padding: 10px 12px; }
  </style>
</head>
<body>
  <!-- Reusable 3-bar header -->
  <div id="hero" data-page="Admin"></div>
  <script src="/hero.js" defer></script>

  <main class="container wide">
    <!-- Title / Token badge -->
    <div class="panel" style="display:flex;align-items:center;justify-content:space-between;gap:12px">
      <h1 id="title" style="margin:0">Admin — Week <span id="weekTitle">?</span></h1>
      <span id="devBadge" title="ADMIN_TOKEN required" style="color:var(--muted);font-weight:700">token required</span>
    </div>

    <!-- Week controls + token -->
    <div class="panel">
      <div class="center" style="gap:8px; flex-wrap:wrap;">
        <label for="week" style="margin-right:6px;">Week:</label>
        <input id="week" class="input" type="number" min="1" value="1" style="max-width:100px" />
        <button class="btn primary" id="btnLoadPrev">Load Preview</button>
        <button class="btn primary" id="btnCompute">Compute Scores</button>
      </div>
      <div class="center" style="margin-top:10px; gap:8px; flex-wrap:wrap;">
        <input id="token" class="input" type="text" placeholder="your_admin_token_here" style="max-width:360px;">
        <button class="btn primary" id="btnUseToken">Use Token</button>
        <span id="tokenStatus" style="color:var(--muted)">Not set</span>
      </div>
    </div>

    <!-- Banners -->
    <div id="topSuccess" class="banner ok" style="display:none;"></div>
    <div id="topError"   class="banner error" style="display:none;"></div>

    <!-- RESULTS: auto-filled from fixtures for the week -->
    <div class="panel" id="previewCard">
      <div class="center" style="justify-content:space-between; width:100%;">
        <strong>Results (for Week <span id="weekTitleInline">?</span>)</strong>
        <span id="previewStatus" style="color:var(--muted)">No preview loaded</span>
      </div>

      <div id="previewEmpty" style="margin-top:8px;color:var(--muted)">No fixtures yet for this week.</div>

      <div id="previewWrap" style="display:none; margin-top:10px;">
        <table class="table" id="resultsTable">
          <thead>
            <tr>
              <th>ID</th><th>Home</th><th>Away</th>
              <th class="right">Home G</th><th class="right">Away G</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
        <div class="center" style="justify-content:flex-end; margin-top:10px; width:100%;">
          <button id="btnSaveResults" class="btn primary">Save Results</button>
        </div>
      </div>
    </div>

    <!-- ADD FIXTURES: manual 10-row entry -->
    <div class="panel">
      <strong>Add Fixtures (manual)</strong>
      <div style="color:var(--muted);margin:4px 0">Fill Home/Away (date/time optional). Blank rows are ignored.</div>

      <table class="table" id="addFixturesTbl">
        <thead>
          <tr><th>#</th><th>Home</th><th>Away</th><th>Date</th><th>Time</th></tr>
        </thead>
        <tbody></tbody>
      </table>

      <div class="center" style="gap:8px;margin-top:8px">
        <button id="btnBulkAddRows" class="btn">Add 10 Rows</button>
        <button id="btnBulkClear" class="btn">Clear</button>
        <button id="btnBulkSubmit" class="btn primary">Submit Fixtures</button>
      </div>

      <label class="center" style="gap:8px;margin-top:8px">
        <input type="checkbox" id="replaceMode">
        <span>Replace existing fixtures for Week <span id="wkRep">?</span> (don’t merge)</span>
      </label>

      <div id="bulkBanner" class="banner ok" style="display:none;margin-top:8px">✅ Fixtures saved.</div>
    </div>

    <!-- MANAGE FIXTURES: delete individual rows -->
    <div class="panel" id="manageFixtures">
      <strong>Manage Fixtures (Week <span id="wkManage">?</span>)</strong>
      <div id="manageEmpty" style="margin-top:8px;color:var(--muted)">No fixtures yet.</div>
      <table class="table" id="manageFixturesTbl" style="display:none;margin-top:8px">
        <thead>
          <tr><th>ID</th><th>Home</th><th>Away</th><th>Date</th><th>Time</th><th class="right">Actions</th></tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>

    <!-- CSV UTILITIES -->
    <div class="panel">
      <strong>CSV Utilities</strong>

      <div style="margin-top:10px;">
        <div class="center" style="gap:8px;flex-wrap:wrap;">
          <input id="fileCsv" type="file" accept=".csv" />
          <button class="btn primary" id="btnImportCsv">Import Fixtures CSV</button>
        </div>
      </div>

      <div style="margin-top:14px;">
        <label>Or paste Fixtures JSON</label>
        <textarea id="jsonBox" class="input" rows="5" placeholder='[{"id":"fixture_arsenal_spurs","home":"Arsenal","away":"Spurs","kickoff_iso":"2025-08-24T16:30:00Z"}]'></textarea>
        <div class="center" style="margin-top:8px; gap:8px;">
          <button class="btn" id="btnImportJson">Import JSON</button>
          <button class="btn" id="btnQuickSeed">Quick Seed 2 Future Fixtures</button>
        </div>
      </div>

      <hr class="mb-3" style="border:none;border-top:2px solid var(--border);margin:12px 0">

      <div class="center" style="margin-top:10px; gap:8px; flex-wrap:wrap;">
        <button class="btn primary" id="btnPredsDownload">Download Predictions CSV</button>
        <button class="btn primary" id="btnScoresDownload">Download Season Scores CSV</button>
      </div>

      <div style="margin-top:12px;">
        <label>Upload Predictions CSV</label>
        <textarea id="csvPreds" class="input" rows="5" placeholder='player_id,predictions,submitted_at,email_sent_at
"abc123","[{\"id\":\"fixture_arsenal_spurs\",\"home\":1,\"away\":0}]",2025-08-01T12:00:00Z,'></textarea>
        <div class="center" style="margin-top:8px; gap:8px;">
          <button class="btn primary" id="btnPredsUpload">Upload Predictions</button>
        </div>
      </div>

      <div style="margin-top:12px;">
        <label>Upload Season Scores CSV</label>
        <textarea id="csvScores" class="input" rows="4" placeholder='player_id,name,total,weeks_played
"abc123","Vince",12,1'></textarea>
        <div class="center" style="margin-top:8px; gap:8px;">
          <button class="btn" id="btnScoresUpload">Upload Scores</button>
        </div>
      </div>
    </div>
  </main>

  <script>
    /* ----------------- helpers ----------------- */
    const $ = sel => document.querySelector(sel);
    const qs = new URLSearchParams(location.search);
    const weekInput = $('#week');
    const weekTitle = $('#weekTitle');
    const weekTitleInline = $('#weekTitleInline');
    const devBadge = $('#devBadge');
    const topError = $('#topError');
    const topSuccess = $('#topSuccess');
    const tokenInput = $('#token');
    const tokenStatus = $('#tokenStatus');
    const wkRep = document.getElementById('wkRep');
    const wkManage = document.getElementById('wkManage');

    function showErr(msg) {
      topError.style.display = 'block';
      topError.textContent = msg;
      topSuccess.style.display = 'none';
    }
    function clearErr() {
      topError.style.display = 'none';
      topError.textContent = '';
    }
    function showOk(msg) {
      topSuccess.style.display = 'block';
      topSuccess.textContent = msg;
      setTimeout(() => { topSuccess.style.display = 'none'; }, 2500);
    }

    function getWeek() { return Number(weekInput.value || 1); }
    function setWeekFromQuery() {
      const w = Number(qs.get('week') || 1);
      weekInput.value = w; weekTitle.textContent = w;
      const wStr = String(w);
      if (weekTitleInline) weekTitleInline.textContent = wStr;
      if (wkRep) wkRep.textContent = wStr;
      if (wkManage) wkManage.textContent = wStr;
    }

    function getToken() { return localStorage.getItem('admin_token') || ''; }
    function setToken(t) {
      if (t) localStorage.setItem('admin_token', t);
      tokenInput.value = t || '';
      tokenStatus.textContent = t ? 'Stored locally' : 'Not set';
    }

    async function apiFetch(url, opts = {}) {
      const headers = Object.assign({ 'Content-Type': 'application/json' }, opts.headers || {});
      const tok = getToken();
      if (tok) headers['x-admin-token'] = tok; // header-based auth
      const res = await fetch(url, { ...opts, headers });
      if (!res.ok) {
       const text = await res.text().catch(() => '');
throw new Error(`${res.status} ${res.statusText} - ${text || 'request failed'}`);

      }
      const ct = res.headers.get('content-type') || '';
      if (ct.includes('application/json')) return res.json();
      return res.text();
    }

    // Probe with header (prevents noisy 401)
    async function probeDevMode() {
      try {
        await apiFetch('/api/admin/health', { method: 'GET' });
        devBadge.style.display = 'none';
      } catch {
        devBadge.textContent = 'token required';
        devBadge.style.display = 'inline-block';
      }
    }

    /* --------- RESULTS preview (fixtures + results) --------- */
    const previewEmpty = $('#previewEmpty');
    const previewWrap = $('#previewWrap');
    const previewStatus = $('#previewStatus');
    const resultsTableBody = $('#resultsTable > tbody');

    async function loadPreview() {
      clearErr();
      const week = getWeek();
      weekTitle.textContent = week;
      if (weekTitleInline) weekTitleInline.textContent = week;

      try {
        const res = await apiFetch(`/api/admin/results?week=\${encodeURIComponent(week)}`, { method: 'GET' });
        const results = (res && res.results) || {};
        await renderResultsEditable(week, results);
        previewStatus.textContent = 'Preview loaded';
      } catch (e) {
        showErr('Network error while loading preview: ' + e.message);
      }
      await renderManage(); // keep Manage table in sync
    }

    async function renderResultsEditable(week, resultsMap) {
      let fixtures = [];
      try {
        const fx = await fetch(`/data/fixtures/season-2025/week-\${week}.json`, {cache:'no-store'});
        if (fx.ok) fixtures = await fx.json();
      } catch {}

      resultsTableBody.innerHTML = '';
      if (!fixtures.length) {
        previewEmpty.style.display = 'block';
        previewWrap.style.display = 'none';
        return;
      }
      previewEmpty.style.display = 'none';
      previewWrap.style.display = 'block';

     for (const f of fixtures) {
  const tr = document.createElement('tr');
  const r = resultsMap[f.id] || {};
  tr.innerHTML = `
    <td>${f.id}</td>
    <td>${f.home || ''}</td>
    <td>${f.away || ''}</td>
    <td class="right">
      <input class="input" type="number" min="0" step="1"
             value="${(r.homeGoals ?? '')}" data-id="${f.id}" data-side="home"
             style="max-width:80px">
    </td>
    <td class="right">
      <input class="input" type="number" min="0" step="1"
             value="${(r.awayGoals ?? '')}" data-id="${f.id}" data-side="away"
             style="max-width:80px">
    </td>
  `;
  resultsTableBody.appendChild(tr);
}

    }

    async function saveResults() {
      clearErr();
      const week = getWeek();
      const inputs = resultsTableBody.querySelectorAll('input[data-id]');
      const map = {};
      inputs.forEach(inp => {
        const id = String(inp.getAttribute('data-id'));
        const side = inp.getAttribute('data-side');
        const v = inp.value === '' ? null : Number(inp.value);
        if (!map[id]) map[id] = { homeGoals: null, awayGoals: null };
        if (side === 'home') map[id].homeGoals = v;
        if (side === 'away') map[id].awayGoals = v;
      });

      const btn = document.getElementById('btnSaveResults');
      btn.disabled = true; btn.textContent = 'Saving…';

      try {
        await apiFetch('/api/admin/results', {
          method: 'POST',
          body: JSON.stringify({ week, results: map })
        });
        previewStatus.textContent = 'Preview loaded • last action: saved';
        showOk('✅ Results saved');
        await loadPreview();
      } catch (e) {
        showErr('Failed saving results: ' + e.message);
      } finally {
        btn.disabled = false; btn.textContent = 'Save Results';
      }
    }

    /* ---------------- fixtures import helpers ---------------- */
    async function importFixturesFromCsvText(csvText) {
      const rows = csvText.trim().split(/\\r?\\n/);
      const headers = rows.shift().split(',').map(s => s.trim());
      const idx = {
        id: headers.indexOf('id'),
        home: headers.indexOf('home'),
        away: headers.indexOf('away'),
        kickoff_iso: headers.indexOf('kickoff_iso'),
      };
      const fixtures = [];
      for (const line of rows) {
        if (!line.trim()) continue;
        const cols = line.split(',').map(s => s.trim());
        fixtures.push({
          id: cols[idx.id],
          home: cols[idx.home],
          away: cols[idx.away],
          kickoff_iso: cols[idx.kickoff_iso],
        });
      }
      return fixtures;
    }

    async function importFixtures(fixtures) {
      clearErr();
      const week = getWeek();
      try {
        await apiFetch('/api/admin/fixtures/import', {
          method: 'POST',
          body: JSON.stringify({ week, fixtures })
        });
        showOk(\`✅ Imported \${fixtures.length} fixtures\`);
        await loadPreview();
      } catch (e) {
        showErr('Import failed: ' + e.message);
      }
    }

    /* ---------------- Add Fixtures (bulk) ---------------- */
    function slugify(s){ return (s||'').toLowerCase().replace(/[^a-z0-9]+/g,'_').replace(/^_+|_+$/g,''); }
    function bulkTbody(){ return document.querySelector('#addFixturesTbl tbody'); }

    function bulkAddRows(n=10){
      const tbody = bulkTbody(); if (!tbody) return;
      const start = tbody.children.length + 1;
      for (let i=0;i<n;i++){
        const idx = start + i;
        const tr = document.createElement('tr');
        tr.innerHTML = \`
          <td>\${idx}</td>
          <td><input class="input" name="home"></td>
          <td><input class="input" name="away"></td>
          <td><input class="input" type="date" name="date"></td>
          <td><input class="input" type="time" name="time" step="60"></td>\`;
        tbody.appendChild(tr);
      }
    }

    async function bulkSubmit(){
      clearErr();
      const week = getWeek();
      const tbody = bulkTbody(); if (!tbody) return;
      const rows = Array.from(tbody.querySelectorAll('tr'));

      // Build new fixtures from the table
      const next = [];
      const seen = new Set();
      const toIso = (d,t)=> (d && t) ? new Date(\`\${d}T\${t}\`).toISOString() : null;

      rows.forEach(tr=>{
        const home = tr.querySelector('input[name="home"]').value.trim();
        const away = tr.querySelector('input[name="away"]').value.trim();
        const date = tr.querySelector('input[name="date"]').value;
        const time = tr.querySelector('input[name="time"]').value;
        if (!home || !away) return;
        let base = \`fixture_\${slugify(home)}_\${slugify(away)}\`, id = base, n=1;
        while (seen.has(id)) { n++; id = \`\${base}_\${n}\`; }
        seen.add(id);
        next.push({ id, home, away, kickoff_iso: toIso(date, time) });
      });

      const replace = document.getElementById('replaceMode')?.checked;

      // Start from existing only if NOT replacing
      let fixtures = [];
      if (!replace) {
        try {
          const res = await fetch(\`/data/fixtures/season-2025/week-\${week}.json?ts=\${Date.now()}\`, { cache:'no-store' });
          if (res.ok) fixtures = await res.json();
        } catch {}
      }

      if (replace) {
        fixtures = next;                            // ✅ full replace
      } else {
        // Merge: replace by id or append
        next.forEach(n=>{
          const i = fixtures.findIndex(f=>f.id===n.id);
          if (i>=0) fixtures[i]=n; else fixtures.push(n);
        });
      }

      try{
        await apiFetch('/api/admin/fixtures/import', {
          method:'POST',
          headers:{'Content-Type':'application/json'},
          body: JSON.stringify({ week, fixtures })
        });
        const b = document.getElementById('bulkBanner'); if (b){ b.style.display='block'; setTimeout(()=>b.style.display='none',1400); }
        await loadPreview();     // refresh Results + Manage
        // reset entry grid
        const tb = bulkTbody(); tb.innerHTML=''; bulkAddRows(10);
      }catch(e){ showErr('Bulk submit failed: ' + e.message); }
    }

    function bulkClear(){ const tb = bulkTbody(); if (tb) tb.innerHTML=''; }

    /* ---------------- Manage Fixtures (delete rows) ---------------- */
    async function readWeekFixtures(week) {
      try {
        const res = await fetch(\`/data/fixtures/season-2025/week-\${week}.json?ts=\${Date.now()}\`, {cache:'no-store'});
        if (res.ok) return await res.json();
      } catch {}
      return [];
    }

    function fmtDT(iso){
      if(!iso) return ['',''];
      const d = new Date(iso);
      return [ d.toLocaleDateString(), d.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'}) ];
    }

    async function renderManage(){
      const week = getWeek();
      if (wkManage) wkManage.textContent = String(week);
      const fixtures = await readWeekFixtures(week);
      const table = document.getElementById('manageFixturesTbl');
      const empty = document.getElementById('manageEmpty');
      const tbody = table.querySelector('tbody');
      tbody.innerHTML='';
      if(!fixtures.length){ table.style.display='none'; empty.style.display='block'; return; }
      empty.style.display='none'; table.style.display='table';
      fixtures.forEach(f=>{
        const [ds,ts] = fmtDT(f.kickoff_iso);
        const tr = document.createElement('tr');
        tr.innerHTML = \`
          <td>\${f.id}</td>
          <td>\${f.home||''}</td>
          <td>\${f.away||''}</td>
          <td>\${ds}</td>
          <td>\${ts}</td>
          <td class="right">
            <button class="btn" data-action="del" data-id="\${f.id}">Delete</button>
          </td>\`;
        tbody.appendChild(tr);
      });
    }

    async function deleteFixture(id){
      clearErr();
      const week = getWeek();
      let fixtures = await readWeekFixtures(week);
      fixtures = fixtures.filter(f => String(f.id) !== String(id));
      try{
        await apiFetch('/api/admin/fixtures/import', {
          method:'POST',
          body: JSON.stringify({ week, fixtures })
        });
        showOk('🗑️ Deleted ' + id);
        await loadPreview();   // refresh Results + Manage
      }catch(e){ showErr('Delete failed: ' + e.message); }
    }

    /* ---------------- CSV utilities ---------------- */
    async function downloadPredictionsCsv() {
      clearErr();
      const week = getWeek();
      try {
        const text = await apiFetch(\`/api/admin/predictions/download?week=\${encodeURIComponent(week)}\`, { method: 'GET' });
        const blob = new Blob([text], { type: 'text/csv' });
        const a = document.createElement('a');
        a.href = URL.createObjectURL(blob);
        a.download = \`predictions-week-\${week}.csv\`; a.click();
        URL.revokeObjectURL(a.href);
      } catch (e) { showErr('Download failed: ' + e.message); }
    }
    async function uploadPredictionsCsv() {
      clearErr();
      const week = getWeek();
      const csv = $('#csvPreds').value;
      try {
        await apiFetch('/api/admin/predictions/upload', {
          method: 'POST',
          body: JSON.stringify({ week, csv })
        });
        showOk('✅ Predictions uploaded');
      } catch (e) { showErr('Upload failed: ' + e.message); }
    }
    async function downloadScoresCsv() {
      clearErr();
      try {
        const text = await apiFetch('/api/admin/scores/download', { method: 'GET' });
        const blob = new Blob([text], { type: 'text/csv' });
        const a = document.createElement('a');
        a.href = URL.createObjectURL(blob);
        a.download = \`season-totals.csv\`; a.click();
        URL.revokeObjectURL(a.href);
      } catch (e) { showErr('Download failed: ' + e.message); }
    }
    async function uploadScoresCsv() {
      clearErr();
      const csv = $('#csvScores').value;
      try {
        await apiFetch('/api/admin/scores/upload', {
          method: 'POST',
          body: JSON.stringify({ csv })
        });
        showOk('✅ Season scores uploaded');
      } catch (e) { showErr('Upload failed: ' + e.message); }
    }

    /* ---------------- compute scores ---------------- */
    async function computeScores() {
      clearErr();
      const week = getWeek();
      try {
        const r = await fetch(\`/api/scores?week=\${encodeURIComponent(week)}\`);
        if (r.ok) { showOk('✅ Scores computed (see leaderboard)'); return; }
      } catch {}
      try {
        const r2 = await fetch(\`/api/scores/compute?week=\${encodeURIComponent(week)}\`);
        if (r2.ok) { showOk('✅ Scores computed'); return; }
        showErr('Compute endpoint not available.');
      } catch (e) { showErr('Compute failed: ' + e.message); }
    }

    /* ---------------- wire up ---------------- */
    function wireEvents() {
      $('#btnUseToken').addEventListener('click', () => setToken(tokenInput.value.trim()));
      $('#btnLoadPrev').addEventListener('click', loadPreview);
      $('#btnSaveResults').addEventListener('click', saveResults);

      // CSV fixtures import
      $('#btnImportCsv').addEventListener('click', async () => {
        const f = $('#fileCsv').files[0]; if (!f) return showErr('Choose a CSV file first.');
        const text = await f.text(); const fixtures = await importFixturesFromCsvText(text); await importFixtures(fixtures);
      });
      $('#btnImportJson').addEventListener('click', async () => {
        try {
          const raw = $('#jsonBox').value.trim();
          const fixtures = JSON.parse(raw);
          const arr = Array.isArray(fixtures) ? fixtures : (fixtures.fixtures || []);
          if (!Array.isArray(arr)) throw new Error('JSON must be an array or {fixtures:[...]}');
          await importFixtures(arr);
        } catch (e) { showErr('Bad JSON: ' + e.message); }
      });
      $('#btnQuickSeed').addEventListener('click', async () => {
        const seed = [
          { id: 'fixture_chelsea_liverpool', home:'Chelsea', away:'Liverpool', kickoff_iso: new Date(Date.now()+ 2*86400000).toISOString() },
          { id: 'fixture_arsenal_spurs',     home:'Arsenal', away:'Spurs',     kickoff_iso: new Date(Date.now()+ 3*86400000).toISOString() },
        ];
        await importFixtures(seed);
      });

      // CSV utils
      $('#btnPredsDownload').addEventListener('click', downloadPredictionsCsv);
      $('#btnPredsUpload').addEventListener('click', uploadPredictionsCsv);
      $('#btnScoresDownload').addEventListener('click', downloadScoresCsv);
      $('#btnScoresUpload').addEventListener('click', uploadScoresCsv);

      // Compute
      $('#btnCompute').addEventListener('click', computeScores);

      // Add Fixtures (bulk)
      const bAdd = document.getElementById('btnBulkAddRows');
      const bClr = document.getElementById('btnBulkClear');
      const bSub = document.getElementById('btnBulkSubmit');
      if (bAdd) bAdd.addEventListener('click', ()=>bulkAddRows(10));
      if (bClr) bClr.addEventListener('click', bulkClear);
      if (bSub) bSub.addEventListener('click', bulkSubmit);

      // Manage Fixtures: row deletes (event delegation)
      const mfTbl = document.getElementById('manageFixturesTbl');
      if (mfTbl) mfTbl.addEventListener('click', (e)=>{
        const btn = e.target.closest('button[data-action="del"]'); if (!btn) return;
        deleteFixture(btn.dataset.id);
      });
    }

    /* ---------------- init ---------------- */
    (async function init() {
      setWeekFromQuery();
      setToken(getToken());
      wireEvents();
      // Start with 10 blank rows for Add Fixtures
      if (document.getElementById('addFixturesTbl')) bulkAddRows(10);
      await probeDevMode();
      await renderManage();
      try { await loadPreview(); } catch {}
    })();
  </script>
</body>
</html>
